[versions]
kotlin = "1.8.21"
android-gradle-pugin = "8.0.1"
activity = "1.7.2"
appcompat = "1.6.1"
constraintlayout = "2.1.4"
material = "1.9.0"
lifecycle = "2.6.1"
navigation = "2.6.0"
# От версии kotlin зависит выбор версии компилятора Compose.
# https://developer.android.com/jetpack/androidx/releases/compose-kotlin#pre-release_kotlin_compatibility
compose-compiler = "1.4.7"
compose-bom = "2023.06.00"
coroutines = "1.7.1"
dagger = "2.46.1"
work = "2.8.1"
google-services-plugin = "4.3.15"
firebase-bom = "31.2.2"
kotlinx-serialization-json = "1.5.0"
junit = "4.13.2"

[libraries]
androidx-core-ktx = { module = "androidx.core:core-ktx", version = "1.9.0" }
# region activity
# for delegating ViewModel (by viewModels())
androidx-activity-ktx = { module = "androidx.activity:activity-ktx", version.ref = "activity" }
# Activity utilities for Compose
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "activity" }
# endregion

# region appcompat
androidx-appcompat = { module = "androidx.appcompat:appcompat", version.ref = "appcompat" }
# endregion

# region constraint layout
androidx-constraintlayout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "constraintlayout" }
# endregion

# region material
material = { module = "com.google.android.material:material", version.ref = "material" }
# endregion

# region lifecycle
# ViewModel
androidx-lifecycle-viewmodel-ktx = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycle" }
# ViewModel utilities for Compose
androidx-lifecycle-viewmodel-compose = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycle" }
# endregion

# region WorkManager API
# java only
androidx-work = { module = "androidx.work:work-runtime", version.ref = "work" }
androidx-work-ktx = { module = "androidx.work:work-runtime-ktx", version.ref = "work" }
# kotlin + coroutines
# endregion

# region navigation
# NavController + view extensions
androidx-navigation-ui-ktx = { module = "androidx.navigation:navigation-ui-ktx", version.ref = "navigation" }
# где-то тут тянется библиотека ktx Fragment с функциями-расширениями типа commit {..}
androidx-navigation-fragment-ktx = { module = "androidx.navigation:navigation-fragment-ktx", version.ref = "navigation" }
# Navigation utilities for Compose
androidx-navigation-compose = { module = "androidx.navigation:navigation-compose", version.ref = "navigation" }
# endregion

# region Jetpack Compose
# BOM https://developer.android.com/jetpack/compose/bom/bom-mapping
compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "compose-bom" }
# Material Design 3
compose-material3 = { module = "androidx.compose.material3:material3" }
# Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
compose-foundation = { module = "androidx.compose.foundation:foundation" }
compose-ui = { module = "androidx.compose.ui:ui" }
# Use only with debugImplementation
compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling" }
# For annotation @Preview
compose-ui-tooling-preveiw = { module = "androidx.compose.ui:ui-tooling-preview" }
compose-material-icons = { module = "androidx.compose.material:material-icons-core" }
# Add full set of material icons
compose-material-icons-extended = { module = "androidx.compose.material:material-icons-extended" }
# Add window size utils
compose-window-size = { module = "androidx.compose.material3:material3-window-size-class" }
# livedata for compose
compose-livedata = { module = "androidx.compose.runtime:runtime-livedata" }
# rxjava2 for compose
compose-rxjava2 = { module = "androidx.compose.runtime:runtime-rxjava2" }
# compose android test
compose-ui-test-junit4 = { module = "androidx.compose.ui:ui-test-junit4" }
# endregion

# region coroutines
coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
# transetive use coroutines-core
coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutines" }
# endregion

# region dagger
dagger = { module = "com.google.dagger:dagger", version.ref = "dagger" }
dagger-compiler = { module = "com.google.dagger:dagger-compiler", version.ref = "dagger" }
# endregion

# region Firebase
firebase-bom = { module = "com.google.firebase:firebase-bom", version.ref = "firebase-bom" }
firebase-crashlytics-ktx = { module = "com.google.firebase:firebase-crashlytics-ktx" }
firebase-config-ktx = { module = "com.google.firebase:firebase-config-ktx" }
# endregion

kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization-json" }

# region rxjava2 (better to use coroutine !!!)
rxjava2 = { module = "io.reactivex.rxjava2:rxjava", version = "2.2.9" }
rxjava2-android = { module = "io.reactivex.rxjava2:rxandroid", version = "2.1.1" }
rxjava2-kotlin = { module = "io.reactivex.rxjava2:rxkotlin", version = "2.3.0" }
# endregion

# region unit test
junit = { module = "junit:junit", version.ref = "junit" }
# endregion

# ui test
androidx-test-junit = { module = "androidx.test.ext:junit", version = "1.1.3" }
androidx-test-espresso = { module = "androidx.test.espresso:espresso-core", version = "3.4.0" }

[bundles]
core = [
    "androidx-core-ktx",
    "androidx-activity-ktx",
    "androidx-lifecycle-viewmodel-ktx",
    "androidx-appcompat"
]
compose = [
    "compose-material3",
    "compose-foundation",
    "compose-ui",
    "compose-ui-tooling-preveiw",
    "compose-material-icons",
    "compose-material-icons-extended",
    "compose-window-size"
]
androidx-navigation = [
    "androidx-navigation-fragment-ktx",
    "androidx-navigation-ui-ktx"
]
androidx-work = [
    "androidx-work",
    "androidx-work-ktx"
]
rxjava = [
    "rxjava2",
    "rxjava2-kotlin",
    "rxjava2-android"
]
test = [
    "junit"
]
androidTest = [
    "androidx-test-junit",
    "androidx-test-espresso"
]

[plugins]
android-application = { id = "com.android.application", version.ref = "android-gradle-pugin" }
android-library = { id = "com.android.library", version.ref = "android-gradle-pugin" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
google-services = { id = "com.google.gms.google-services", version.ref = "google-services-plugin" }
# TODO удалить, когда для versionCatalog заработают предложения обновления версий
#   [bug](https://issuetracker.google.com/issues/226078451)
#   См. [описание работы](https://github.com/janderssonse/gradle-versions-filter-plugin)
#   Для запуска плагина нужно выполнить задачу:
#   ./gradlew dependencyUpdates
gradle-versions-filter = { id = "se.ascp.gradle.gradle-versions-filter", version = "0.1.16" }
